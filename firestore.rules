rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is active
    function isActive() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isActive', true) == true;
    }
    
    // Helper function to check if user is authenticated AND active
    function isAuthenticatedAndActive() {
      return isAuthenticated() && isActive();
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // ========================================
    // INVITE CODES COLLECTION (Admin Only)
    // ========================================
    match /invite_codes/{codeId} {
      // Only admins can read invite codes
      allow read: if isAdmin();
      
      // Only admins can create invite codes
      allow create: if isAdmin() && 
                      request.resource.data.keys().hasAll(['code', 'role', 'maxUses', 'usedCount', 'isActive']);
      
      // Only admins can update invite codes
      allow update: if isAdmin();
      
      // Only admins can delete invite codes
      allow delete: if isAdmin();
    }
    
    // ========================================
    // USERS COLLECTION
    // ========================================
    match /users/{userId} {
      // Users can read their own data (always allow to check isActive status)
      allow read: if isOwner(userId);
      
      // Admins can read all users
      allow read: if isAdmin();
      
      // Allow new user creation during registration
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.keys().hasAll(['name', 'email', 'phone', 'role', 'createdAt', 'updatedAt']);
      
      // Users can update their own data EXCEPT role and isActive fields
      allow update: if isAuthenticatedAndActive() &&
                      isOwner(userId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'isActive']);
      
      // Only admins can update user roles and isActive status
      allow update: if isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // ========================================
    // CARS COLLECTION
    // ========================================
    match /cars/{carId} {
      // Users can read their own cars (only if active)
      allow read: if isAuthenticatedAndActive() && resource.data.userId == request.auth.uid;
      
      // Admins and active technicians can read all cars
      allow read: if isAdmin() || (isAuthenticatedAndActive() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'technician');
      
      // Users can create cars for themselves (only if active)
      allow create: if isAuthenticatedAndActive() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own cars (only if active)
      allow update: if isAuthenticatedAndActive() && 
                      resource.data.userId == request.auth.uid;
      
      // Users can delete their own cars (only if active)
      allow delete: if isAuthenticatedAndActive() && 
                      resource.data.userId == request.auth.uid;
    }
    
    // ========================================
    // BOOKINGS COLLECTION
    // ========================================
    match /bookings/{bookingId} {
      // Users can read their own bookings (only if active)
      allow read: if isAuthenticatedAndActive() && resource.data.userId == request.auth.uid;
      
      // Admins and active technicians can read all bookings
      allow read: if isAdmin() || (isAuthenticatedAndActive() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'technician');
      
      // Users can create bookings for themselves (only if active)
      allow create: if isAuthenticatedAndActive() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own pending bookings (only if active)
      allow update: if isAuthenticatedAndActive() && 
                      resource.data.userId == request.auth.uid &&
                      resource.data.status == 'pending';
      
      // Active technicians and admins can update any booking
      allow update: if isAdmin() || (isAuthenticatedAndActive() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'technician');
      
      // Only admins can delete bookings
      allow delete: if isAdmin();
    }
    
    // ========================================
    // SERVICES COLLECTION (Admin managed)
    // ========================================
    match /services/{serviceId} {
      // Anyone authenticated and active can read services
      allow read: if isAuthenticatedAndActive();
      
      // Only admins can create, update, or delete services
      allow create, update, delete: if isAdmin();
    }
    
    // ========================================
    // NOTIFICATIONS COLLECTION
    // ========================================
    match /notifications/{notificationId} {
      // Users can read their own notifications (only if active)
      allow read: if isAuthenticatedAndActive() && resource.data.userId == request.auth.uid;
      
      // Admins can read all notifications
      allow read: if isAdmin();
      
      // System can create notifications (handled by backend, only if user is active)
      allow create: if isAuthenticatedAndActive();
      
      // Users can update (mark as read) their own notifications (only if active)
      allow update: if isAuthenticatedAndActive() && resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications (only if active)
      allow delete: if isAuthenticatedAndActive() && resource.data.userId == request.auth.uid;
      
      // Admins can delete any notifications
      allow delete: if isAdmin();
    }
    
    // ========================================
    // REVIEWS/RATINGS COLLECTION
    // ========================================
    match /reviews/{reviewId} {
      // Anyone authenticated and active can read reviews
      allow read: if isAuthenticatedAndActive();
      
      // Users can create reviews for their completed bookings (only if active)
      allow create: if isAuthenticatedAndActive() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own reviews (only if active)
      allow update: if isAuthenticatedAndActive() && resource.data.userId == request.auth.uid;
      
      // Users can delete their own reviews (only if active)
      allow delete: if isAuthenticatedAndActive() && resource.data.userId == request.auth.uid;
      
      // Admins can delete any reviews
      allow delete: if isAdmin();
    }

    // Offers collection
    match /offers/{offerId} {
      // Allow all authenticated and active users to read offers
      allow read: if isAuthenticatedAndActive();

      // Only admins can create, update, or delete offers
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}


